import Header from "@/components/header";
import GroupService from "@/services/GroupService";
import { Group } from "@/types";
import Head from "next/head";
import GroupOverviewTable from "@/components/groups/groupOverviewTable";
import { useEffect, useState } from "react";
import { User } from "@/types";
import UserOverviewTable from "@/components/users/UserOverviewTable";

const Groups: React.FC = () => {
  const [groups, setGroups] = useState<Array<Group>>([]);
  const [users, setUsers] = useState<Array<User>>([]);
  const [groupClicked, setGroupClicked] = useState<boolean>(false);
  const [groupCode, setGroupCode] = useState<string>("");
  const [userId, setUserId] = useState<number | string>("");
  const [errorMessage, setErrorMessage] = useState<string>("");

  const getGroups = async () => {
    const response = await GroupService.getAllGroups();
    const json = await response.json();
    setGroups(json);
  };

  const getUsersByGroup = async (code: string) => {
    const response = await GroupService.getUsersByGroup(code);
    const json = await response.json();
    setUsers(json);
    setGroupClicked(true);
  };

  const handleRowClick = (groupCode: string) => {
    getUsersByGroup(groupCode);
  };

  const addUser = async () => {
    setErrorMessage(""); // Reset the error message before each attempt
    if (groupCode && userId) {
      try {
        const response = await GroupService.addUserToGroup(
          groupCode,
          Number(userId)
        );

        if (response.ok) {
          alert("User added to group successfully!");
          getUsersByGroup(groupCode);
        } else {
          const errorData = await response.json();
          setErrorMessage(errorData.message || "An error occurred.");
        }
      } catch (error) {
        console.error("Error adding user to group:", error);
        setErrorMessage("An unexpected error occurred.");
      }
    } else {
      setErrorMessage("Please provide both group code and user ID.");
    }
  };

  useEffect(() => {
    getGroups();
    setUsers([]);
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <div className="add-user-container">
          <input
            type="text"
            className="input-group-code"
            placeholder="Group Code"
            value={groupCode}
            onChange={(e) => setGroupCode(e.target.value)}
          />
          <input
            type="number"
            className="input-user-id"
            placeholder="User ID"
            value={userId}
            onChange={(e) => setUserId(e.target.value)}
          />
          <button className="button-add-user" onClick={addUser}>
            Add User
          </button>
        </div>
        {errorMessage && <p className="error-message">{errorMessage}</p>}

        <h1>Groups:</h1>
        {groups && (
          <GroupOverviewTable groups={groups} onRowClick={handleRowClick} />
        )}

        {groupClicked && (
          <>
            <h1>Users:</h1>
            {users.length > 0 ? (
              <UserOverviewTable users={users} />
            ) : (
              <p className="missing-users-message">No users yet.</p>
            )}
          </>
        )}
      </main>
    </>
  );
};

export default Groups;
